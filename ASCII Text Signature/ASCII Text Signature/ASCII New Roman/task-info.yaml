type: edu
custom_name: stage4
files:
- name: src/signature/Main.kt
  visible: true
  text: |
    package signature

    val BORDESIDES = '|'
    val BORDERTOP  = '_'
    val BORDERBOTTOM = '.'
    val BLANK = ' '
    val ATSERISK = '*'


    fun main() {
        print("Enter name and surname: > ")
        val (firstname,lastname) = readLine()!!.lowercase().split(" ")
        print("Enter person's status: > ")
        val status = readLine()!!

        val l = lenghtTagName(firstname,lastname)
        val fulll= fullLenghtTagName(firstname,lastname) //with blanks between letters and six blanks

         if (fulll>status.length) {

             val numofAtserik = numOfAtserik(firstname, lastname, status)
             val blank = " "
             printRepeat(ATSERISK, numofAtserik, false, true)

             val firstAndLast = "$firstname $lastname" // "$firstname$lastname"
             for (j in 0..2) {
                 // if (j==0)
                 //   println("*${blank.repeat(numofAtserik-2)}*")
                 print("*  ")
                 for (i in 0 until firstAndLast.length) {

                     Ot.pp(firstAndLast[i], j + 1)
                     print(" ")
                 }
                     print(" *")
                     println()

             }

             printStaus(numofAtserik, status)
             printRepeat(ATSERISK, numofAtserik, false, false)
         }
        else {
             val numofAtserik = numOfAtserik(firstname, lastname, status)
             val rest = numofAtserik - fulll - 2  -1 // asterik in prefux and suffix, -1 blank in end of tag name. look down
             val blank = " "
             printRepeat(ATSERISK, numofAtserik, false, true)
             val firstAndLast = "$firstname $lastname" // "$firstname$lastname"
             for (j in 0..2) {
                  val leftSpace= spaces (numofAtserik , status , fulll , true)
                  print("*${blank.repeat(leftSpace)}")
                 for (i in 0 until firstAndLast.length) {

                     Ot.pp(firstAndLast[i], j + 1)
                     print(" ") // down
                 }
                 val rightSpace= spaces (numofAtserik , status , fulll , false)
                 print("${blank.repeat(rightSpace)}*")
                 println()
             }

             printStaus(numofAtserik, status)
             printRepeat(ATSERISK, numofAtserik, false, false)
         }
    }


    fun spaces (totalAsterik: Int , status:String , full :Int, left: Boolean): Int {

        val rest = totalAsterik - full -2
        if (rest % 2 == 0) {
            if (left)
              return rest/2
            else
              return rest/2 - 1
        }

        if (rest % 2 == 1) {
            if (left)
                return rest/2
            else
                return rest/2
        }

        return 0
    }

    fun printRepeat(c: Char, n:Int, blankFirst: Boolean ,println: Boolean ) {
        if(blankFirst)
            print(BLANK)

        repeat(n) {
            print(c)
        }
        if(println)
            println()
    }

    fun lenghtTagName(f: String , l:String): Int {

        var genList = mutableListOf<Char>()
        genList.add('i')
        genList.add('j')
        genList.add('t')
        genList.add('w')
        genList.add('y')

        val both = "$f$l"
        var l = 0
        for (e in both) {
            if (!genList.contains(e))
                l = l + 4
            else {
              when (e) {
                  'i' -> l = l + 1
                  'j' -> l = l + 2
                  't' -> l = l + 3
                  'w' -> l = l + 5
                  'y' -> l = l + 5
              }
            }
        }
        return l
    }


    fun fullLenghtTagName(f: String , l:String): Int {

        return lenghtTagName(f , l) + 6 + f.length - 1 + l.length -1
    }


    fun numOfAtserik (f: String , l: String , s: String): Int{

        var fullLen = fullLenghtTagName(f,l)
        var len =lenghtTagName(f,l)

        if (fullLen > s.length) {
            len = len + f.length - 1 // space betwee letters
            len = len + l.length - 1 // space betwee letters
            len = len + 3 + 3 // 2 blanks suffix 2 preffic  // "*  "     "  */
            len = len + 6 // 6 between f and l
            return len
        } else {
            return s.length + 3 + 3 // 2 blanks suffix 2 preffic  // "*  "     "  */
        }
    }

    class Ot (val c: Char) {
        companion object {
            val M = mapOf(
                'a' to ::printA,
                'b' to ::printB,
                'c' to ::printC,
                'd' to ::printD,
                'e' to ::printE,
                'f' to ::printF,
                'g' to ::printG,
                'h' to ::printH,
                'i' to ::printI,
                'j' to ::printJ,
                'k' to ::printK,
                'l' to ::printL,
                'm' to ::printM,
                'n' to ::printN,
                'o' to ::printO,
                'p' to ::printP,
                'q' to ::printQ,
                'r' to ::printR,
                's' to ::printS,
                't' to ::printT,
                'u' to ::printU,
                'v' to ::printV,
                'w' to ::printW,
                'x' to ::printX,
                'y' to ::printY,
                'z' to ::printZ,
                ' ' to ::printBlanks
            )

            fun pp(c:Char , l: Int ){
                M.get(c)!!.invoke(l)
            }
        }
    }

    fun printStaus(x:Int , status:String) {
        val blank = " "

        if ( x % 2 + status.length % 2 == 1) {
            if (x%2==0) {
                println("*${blank.repeat(x / 2 - (status.length / 2 + 1 + 1))}$status${blank.repeat(x / 2 - status.length / 2 - 1)}*")
            } else {
                println("*${blank.repeat(x / 2 - (status.length / 2 + 1 ))}$status${blank.repeat(x / 2 - status.length / 2 - 1 + 1)}*")
            }

        }

        // can be 0 or 2
        if ( (x % 2 + status.length % 2) %2  == 0) {
                 println("*${blank.repeat(x / 2 - (status.length / 2 + 1 ))}$status${blank.repeat(x / 2 - status.length / 2 - 1 )}*")
        }

    }


    fun printA (l: Int){
        when(l) {
            1 -> print("____")
            2 -> print("|__|")
            3 -> print("|  |")
        }
    }

    fun printB (l: Int){
        when(l) {
            1 -> print("___ ")
            2 -> print("|__]")
            3 -> print("|__]")
        }
    }

    fun printC (l: Int){
        when(l) {
            1 -> print("____")
            2 -> print("|   ")
            3 -> print("|___")
        }
    }

    fun printD (l: Int){
        when(l) {
            1 -> print("___ ")
            2 -> print("|  \\")
            3 -> print("|__/")
        }
    }

    fun printE (l: Int){
        when(l) {
            1 -> print("____")
            2 -> print("|___")
            3 -> print("|___")
        }
    }

    fun printF (l: Int){
        when(l) {
            1 -> print("____")
            2 -> print("|___")
            3 -> print("|   ")
        }
    }

    fun printG (l: Int){
        when(l) {
            1 -> print("____")
            2 -> print("| __")
            3 -> print("|__]")
        }
    }

    fun printH (l: Int){
        when(l) {
            1 -> print("_  _")
            2 -> print("|__|")
            3 -> print("|  |")
        }
    }

    fun printI (l: Int){
        when(l) {
            1 -> print("_")
            2 -> print("|")
            3 -> print("|")
        }
    }

    fun printJ (l: Int){
        when(l) {
            1 -> print(" _")
            2 -> print(" |")
            3 -> print("_|")
        }
    }

    fun printK (l: Int){
        when(l) {
            1 -> print("_  _")
            2 -> print("|_/ ")
            3 -> print("| \\_")
        }
    }

    fun printL (l: Int){
        when(l) {
            1 -> print("_   ")
            2 -> print("|   ")
            3 -> print("|___")
        }
    }

    fun printM (l: Int){
        when(l) {
            1 -> print("_  _")
            2 -> print("|\\/|")
            3 -> print("|  |")
        }
    }

    fun printN (l: Int){
        when(l) {
            1 -> print("_  _")
            2 -> print("|\\ |")
            3 -> print("| \\|")
        }
    }

    fun printO(l: Int){
        when(l) {
            1 -> print("____")
            2 -> print("|  |")
            3 -> print("|__|")
        }
    }

    fun printP(l: Int){
        when(l) {
            1 -> print("___ ")
            2 -> print("|__]")
            3 -> print("|   ")
        }
    }

    fun printQ(l: Int){
        when(l) {
            1 -> print("____")
            2 -> print("|  |")
            3 -> print("|_\\|")
        }
    }

    fun printR (l: Int){
        when(l) {
            1 -> print("____")
            2 -> print("|__/")
            3 -> print("|  \\")
        }
    }

    fun printS (l: Int){
        when(l) {
            1 -> print("____")
            2 -> print("[__ ")
            3 -> print("___]")
        }
    }

    fun printT (l: Int){
        when(l) {
            1 -> print("___")
            2 -> print(" | ")
            3 -> print(" | ")
        }
    }

    fun printU (l: Int){
        when(l) {
            1 -> print("_  _")
            2 -> print("|  |")
            3 -> print("|__|")
        }
    }

    fun printV (l: Int){
        when(l) {
            1 -> print("_  _")
            2 -> print("|  |")
            3 -> print(" \\/ ")
        }
    }

    fun printW (l: Int){
        when(l) {
            1 -> print("_ _ _")
            2 -> print("| | |")
            3 -> print("|_|_|")
        }
    }

    fun printX (l: Int){
        when(l) {
            1 -> print("_  _")
            2 -> print(" \\/ ")
            3 -> print("_/\\_")
        }
    }

    fun printY (l: Int){
        when(l) {
            1 -> print("_   _")
            2 -> print(" \\_/ ")
            3 -> print("  |  ")
        }
    }

    fun printZ (l: Int){
        when(l) {
            1 -> print("___ ")
            2 -> print("  / ")
            3 -> print(" /__")
        }
    }

    // since blank before and after so 6
    fun printBlanks (l: Int) {
        when (l) {
            1 -> print("    ")
            2 -> print("    ")
            3 -> print("    ")
        }
    }
  learner_created: false
- name: test/TestCaseHelpers.kt
  visible: false
  text: |+
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testcase.TestCase


    /** Default testCase. */
    fun <T> testCase(attach: T, input: String) = TestCase<T>().apply {
        setInput(input)
        setAttach(attach)
    }

    class InputClue(
            val input: String,
            val isPrivate: Boolean = false,
            /** Hint will be printed even for private tests. */
            val hint: String? = null
    ) {

        /** Ciphers [message] or adds a [hint] to the error if it is not null. */
        fun toFailure(message: String): CheckResult {
            if (isPrivate) {
                return CheckResult.wrong("Incorrect output. This is a private test. " + (hint ?: ""))
            } else {
                return CheckResult.wrong("$message ${hint ?: ""}")
            }
        }
    }

    fun inputCase(
            input: String,
            isPrivate: Boolean = false,
            hint: String? = null
    ) = testCase(InputClue(input, isPrivate, hint), input)


  learner_created: false
- name: test/Authors.kt
  visible: false
  text: |
    import java.util.*

    private class Letter(
            val rows: List<String>
    ) {
        init {
            if (rows.distinctBy { it.length }.size != 1) {
                throw IllegalStateException("Bad letter. Not equal width in lines: ${rows.distinctBy { it.length }}")
            }
        }

        val width get() = rows[0].length
        val height get() = rows.size
    }

    private class Font(
            val charsToLetters: MutableMap<Char, Letter>,
            val height: Int
    ) {
        operator fun get(char: Char) = charsToLetters[char]
    }

    private fun makeLetters(fontStr: String): Font {
        val scanner = Scanner(fontStr)

        val h = scanner.nextInt()
        val n = scanner.nextInt()

        val charsToLetters = mutableMapOf<Char, Letter>()

        repeat(n) {
            val char = scanner.next()[0]
            val w = scanner.nextInt()
            scanner.nextLine()

            val rows = mutableListOf<String>()
            repeat(h) {
                rows += scanner.nextLine().trimEnd('\n')
            }
            charsToLetters[char] = Letter(rows)
        }

        val letterA = charsToLetters['a']!!
        charsToLetters[' '] = Letter(List(letterA.height) { " ".repeat(letterA.width) })

        return Font(charsToLetters, h)
    }

    /** Wrap with eights. */
    fun framed(lines: List<String>): String {
        val builder = StringBuilder()

        builder.append("8".repeat(lines[0].length + 8) + "\n")
        lines.forEach { line ->
            builder.append("88  $line  88\n")
        }
        builder.append("8".repeat(lines[0].length + 8))
        return builder.toString()
    }

    private fun centeredLines(lines: List<String>): List<String> {
        val maxLen = lines.map { it.length }.maxOrNull()!!

        return lines.map { line ->
            val need = maxLen - line.length
            " ".repeat(need / 2) + line + " ".repeat((need + 1) / 2)
        }
    }

    fun authors(input: String): String {
        val roman = makeLetters(romanFontStr)
        val medium = makeLetters(mediumFontStr)

        val scanner = Scanner(input)
        val name = scanner.next() + " " + scanner.next()
        scanner.nextLine()
        val status = scanner.nextLine()

        val nameLetters = name.map {
            roman[it] ?: throw IllegalArgumentException("unknown letter $it in roman font")
        }
        val statusLetters = status.map {
            medium[it] ?: throw IllegalArgumentException("unknown letter $it in medium font")
        }

        val lines = mutableListOf<String>()

        repeat(roman.height) { i ->
            lines += nameLetters.map { it.rows[i] }.joinToString("")
        }
        repeat(medium.height) { i ->
            lines += statusLetters.map { it.rows[i] }.joinToString("")
        }

        return framed(centeredLines(lines))
    }
  learner_created: false
- name: test/Task4Test.kt
  visible: false
  text: |2

    import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult

    private val allLetters = (('a'..'z') + ('A'..'Z')).joinToString("")

    class Task4Test : StageTest<InputClue>() {

        override fun generate() = listOf(
                inputCase("Ian One\nVIP",
                        hint = "This test corresponds to the example #1."),

                inputCase("A b\nlong participant",
                        hint = "This test corresponds to the example #2."),

                inputCase("Bill Gates\nVIP"),
                inputCase("Tom Smith\nWorker"),
                inputCase("Mr Anonimous\nParticipant"),

                inputCase("X Y\nAbcdAbcdAbcdAbcd", true,
                        "This test checks a long status with even length."),

                inputCase("X Y\nAbcdAbcdAbcdAbcdA", true,
                        "This test checks a long status with uneven length."),

                inputCase("X Y\nStatus  with spaces",
                        hint = "Status should be printed with " +
                                "the same spaces as original, but " +
                                "name and surname shouldn't contain spaces."),

                inputCase("$allLetters Ivan\nHello", true,
                        hint = "This test checks all possible letters for name."),

                inputCase("Ivan Ivan\n$allLetters", true,
                        hint = "This test checks all possible letters for status.")
        )


        private inline fun checkBadgeBorder(badge: String, onFailure: (msg: String) -> Unit) {
            val lines = badge.split("\n")

            if (lines.map { it.length }.toSet().size != 1) {
                onFailure("Your border is not rectangular.")
                return
            }
            if (lines.size < 2) {
                onFailure("Your border is not rectangular.")
                return
            }
            if (lines.first().any { it != '8' } || lines.last() != lines.first()) {
                onFailure("Your top and bottom edges don't consist of '8'.")
                return
            }
            if (!lines.drop(1).dropLast(1).all { it.startsWith("88  ") && it.endsWith("  88") }) {
                onFailure("Your left and right edges don't consist of \"88\" with two spaces padding.")
                return
            }
        }

        /** Compare height, indentation and line contents. */
        private inline fun compareBadges(user: String, author: String, onFailure: (msg: String) -> Unit) {
            val userLines = user.split("\n")
            val authorLines = author.split("\n")

            if (userLines.size != authorLines.size) {
                onFailure("Signature height is incorrect: ${userLines.size} lines instead of ${authorLines.size}.")
                return
            }

            userLines.zip(authorLines)
                    .forEach { (userStr, authorStr) ->
                        if (userStr.trim('8', ' ') != authorStr.trim('8', ' ')) {
                            onFailure("Some line in your signature is incorrect.")
                            return
                        } else if (userStr != authorStr) {
                            onFailure("Some indentation in your signature is incorrect.")
                            return
                        }
                    }
        }

        override fun check(reply: String, clue: InputClue): CheckResult {
            val badgeStart = reply.indexOf('8')
            if (badgeStart == -1) {
                return CheckResult.wrong("Your output doesn't contain a signature, wrapped in '8' symbols.")
            }

            val userBadge = reply
                    .substring(badgeStart)
                    .trim('\n', ' ')

            checkBadgeBorder(userBadge) { errorMessage ->
                return CheckResult.wrong(errorMessage)
            }

            val badge = authors(clue.input)

            compareBadges(userBadge, badge) { errorMessage ->
                val (name, status) = clue.input.split("\n")
                return clue.toFailure("Wrong output for input lines \"$name\" and \"$status\". $errorMessage")
            }
            return CheckResult.correct()
        }
    }
  learner_created: false
- name: test/FontsHardcoded.kt
  visible: false
  text: |2

    val romanFontStr = """10+52
    a+10
    ++++++++++
    ++++++++++
    +.oooo.+++
    `P++)88b++
    +.oP"888++
    d8(++888++
    `Y888""8o+
    ++++++++++
    ++++++++++
    ++++++++++
    b+11
    +.o8+++++++
    "888+++++++
    +888oooo.++
    +d88'+`88b+
    +888+++888+
    +888+++888+
    +`Y8bod8P'+
    +++++++++++
    +++++++++++
    +++++++++++
    c+10
    ++++++++++
    ++++++++++
    +.ooooo.++
    d88'+`"Y8+
    888+++++++
    888+++.o8+
    `Y8bod8P'+
    ++++++++++
    ++++++++++
    ++++++++++
    d+11
    ++++++.o8++
    +++++"888++
    +.oooo888++
    d88'+`888++
    888+++888++
    888+++888++
    `Y8bod88P"+
    +++++++++++
    +++++++++++
    +++++++++++
    e+10
    ++++++++++
    ++++++++++
    +.ooooo.++
    d88'+`88b+
    888ooo888+
    888++++.o+
    `Y8bod8P'+
    ++++++++++
    ++++++++++
    ++++++++++
    f+8
    +.o88o.+
    +888+`"+
    o888oo++
    +888++++
    +888++++
    +888++++
    o888o+++
    ++++++++
    ++++++++
    ++++++++
    g+11
    +++++++++++
    +++++++++++
    +.oooooooo+
    888'+`88b++
    888+++888++
    `88bod8P'++
    `8oooooo.++
    d"+++++YD++
    "Y88888P'++
    +++++++++++
    h+12
    oooo++++++++
    `888++++++++
    +888+.oo.+++
    +888P"Y88b++
    +888+++888++
    +888+++888++
    o888o+o888o+
    ++++++++++++
    ++++++++++++
    ++++++++++++
    i+6
    +o8o++
    +`"'++
    oooo++
    `888++
    +888++
    +888++
    o888o+
    ++++++
    ++++++
    ++++++
    j+8
    ++++o8o+
    ++++`"'+
    +++oooo+
    +++`888+
    ++++888+
    ++++888+
    ++++888+
    ++++888+
    .o.+88P+
    `Y888P++
    k+12
    oooo++++++++
    `888++++++++
    +888++oooo++
    +888+.8P'+++
    +888888.++++
    +888+`88b.++
    o888o+o888o+
    ++++++++++++
    ++++++++++++
    ++++++++++++
    l+6
    oooo++
    `888++
    +888++
    +888++
    +888++
    +888++
    o888o+
    ++++++
    ++++++
    ++++++
    m+18
    ++++++++++++++++++
    ++++++++++++++++++
    ooo.+.oo.++.oo.+++
    `888P"Y88bP"Y88b++
    +888+++888+++888++
    +888+++888+++888++
    o888o+o888o+o888o+
    ++++++++++++++++++
    ++++++++++++++++++
    ++++++++++++++++++
    n+12
    ++++++++++++
    ++++++++++++
    ooo.+.oo.+++
    `888P"Y88b++
    +888+++888++
    +888+++888++
    o888o+o888o+
    ++++++++++++
    ++++++++++++
    ++++++++++++
    o+10
    ++++++++++
    ++++++++++
    +.ooooo.++
    d88'+`88b+
    888+++888+
    888+++888+
    `Y8bod8P'+
    ++++++++++
    ++++++++++
    ++++++++++
    p+11
    +++++++++++
    +++++++++++
    oo.ooooo.++
    +888'+`88b+
    +888+++888+
    +888+++888+
    +888bod8P'+
    +888+++++++
    o888o++++++
    +++++++++++
    q+11
    +++++++++++
    +++++++++++
    +.ooooo+oo+
    d88'+`888++
    888+++888++
    888+++888++
    `V8bod888++
    ++++++888.+
    ++++++8P'++
    ++++++"++++
    r+9
    +++++++++
    +++++++++
    oooo+d8b+
    `888""8P+
    +888+++++
    +888+++++
    d888b++++
    +++++++++
    +++++++++
    +++++++++
    s+9
    +++++++++
    +++++++++
    +.oooo.o+
    d88(++"8+
    `"Y88b.++
    o.++)88b+
    8""888P'+
    +++++++++
    +++++++++
    +++++++++
    t+8
    ++++.+++
    ++.o8+++
    .o888oo+
    ++888+++
    ++888+++
    ++888+.+
    ++"888"+
    ++++++++
    ++++++++
    ++++++++
    u+12
    ++++++++++++
    ++++++++++++
    oooo++oooo++
    `888++`888++
    +888+++888++
    +888+++888++
    +`V88V"V8P'+
    ++++++++++++
    ++++++++++++
    ++++++++++++
    v+12
    ++++++++++++
    ++++++++++++
    oooo++++ooo+
    +`88.++.8'++
    ++`88..8'+++
    +++`888'++++
    ++++`8'+++++
    ++++++++++++
    ++++++++++++
    ++++++++++++
    w+17
    +++++++++++++++++
    +++++++++++++++++
    oooo+oooo++++ooo+
    +`88.+`88.++.8'++
    ++`88..]88..8'+++
    +++`888'`888'++++
    ++++`8'++`8'+++++
    +++++++++++++++++
    +++++++++++++++++
    +++++++++++++++++
    x+12
    ++++++++++++
    ++++++++++++
    oooo++++ooo+
    +`88b..8P'++
    +++Y888'++++
    +.o8"'88b+++
    o88'+++888o+
    ++++++++++++
    ++++++++++++
    ++++++++++++
    y+12
    ++++++++++++
    ++++++++++++
    oooo++++ooo+
    +`88.++.8'++
    ++`88..8'+++
    +++`888'++++
    ++++.8'+++++
    .o..P'++++++
    `Y8P'+++++++
    ++++++++++++
    z+11
    +++++++++++
    +++++++++++
    ++oooooooo+
    +d'""7d8P++
    +++.d8P'+++
    +.d8P'++.P+
    d8888888P++
    +++++++++++
    +++++++++++
    +++++++++++
    A+16
    ++++++.o.+++++++
    +++++.888.++++++
    ++++.8"888.+++++
    +++.8'+`888.++++
    ++.88ooo8888.+++
    +.8'+++++`888.++
    o88o+++++o8888o+
    ++++++++++++++++
    ++++++++++++++++
    ++++++++++++++++
    B+13
    oooooooooo.++
    `888'+++`Y8b+
    +888+++++888+
    +888oooo888'+
    +888++++`88b+
    +888++++.88P+
    o888bood8P'++
    +++++++++++++
    +++++++++++++
    +++++++++++++
    C+13
    ++.oooooo.+++
    +d8P'++`Y8b++
    888++++++++++
    888++++++++++
    888++++++++++
    `88b++++ooo++
    +`Y8bood8P'++
    +++++++++++++
    +++++++++++++
    +++++++++++++
    D+14
    oooooooooo.+++
    `888'+++`Y8b++
    +888++++++888+
    +888++++++888+
    +888++++++888+
    +888+++++d88'+
    o888bood8P'+++
    ++++++++++++++
    ++++++++++++++
    ++++++++++++++
    E+13
    oooooooooooo+
    `888'+++++`8+
    +888+++++++++
    +888oooo8++++
    +888++++"++++
    +888+++++++o+
    o888ooooood8+
    +++++++++++++
    +++++++++++++
    +++++++++++++
    F+13
    oooooooooooo+
    `888'+++++`8+
    +888+++++++++
    +888oooo8++++
    +888++++"++++
    +888+++++++++
    o888o++++++++
    +++++++++++++
    +++++++++++++
    +++++++++++++
    G+14
    ++.oooooo.++++
    +d8P'++`Y8b+++
    888+++++++++++
    888+++++++++++
    888+++++ooooo+
    `88.++++.88'++
    +`Y8bood8P'+++
    ++++++++++++++
    ++++++++++++++
    ++++++++++++++
    H+14
    ooooo+++ooooo+
    `888'+++`888'+
    +888+++++888++
    +888ooooo888++
    +888+++++888++
    +888+++++888++
    o888o+++o888o+
    ++++++++++++++
    ++++++++++++++
    ++++++++++++++
    I+6
    ooooo+
    `888'+
    +888++
    +888++
    +888++
    +888++
    o888o+
    ++++++
    ++++++
    ++++++
    J+8
    +++oooo+
    +++`888+
    ++++888+
    ++++888+
    ++++888+
    ++++888+
    .o.+88P+
    `Y888P++
    ++++++++
    ++++++++
    K+13
    oooo++++oooo+
    `888+++.8P'++
    +888++d8'++++
    +88888[++++++
    +888`88b.++++
    +888++`88b.++
    o888o++o888o+
    +++++++++++++
    +++++++++++++
    +++++++++++++
    L+13
    ooooo++++++++
    `888'++++++++
    +888+++++++++
    +888+++++++++
    +888+++++++++
    +888+++++++o+
    o888ooooood8+
    +++++++++++++
    +++++++++++++
    +++++++++++++
    M+17
    ooo++++++++ooooo+
    `88.+++++++.888'+
    +888b+++++d'888++
    +8+Y88.+.P++888++
    +8++`888'+++888++
    +8++++Y+++++888++
    o8o++++++++o888o+
    +++++++++++++++++
    +++++++++++++++++
    +++++++++++++++++
    N+15
    ooooo++++++ooo+
    `888b.+++++`8'+
    +8+`88b.++++8++
    +8+++`88b.++8++
    +8+++++`88b.8++
    +8+++++++`888++
    o8o++++++++`8++
    +++++++++++++++
    +++++++++++++++
    +++++++++++++++
    O+13
    ++.oooooo.+++
    +d8P'++`Y8b++
    888++++++888+
    888++++++888+
    888++++++888+
    `88b++++d88'+
    +`Y8bood8P'++
    +++++++++++++
    +++++++++++++
    +++++++++++++
    P+13
    ooooooooo.+++
    `888+++`Y88.+
    +888+++.d88'+
    +888ooo88P'++
    +888+++++++++
    +888+++++++++
    o888o++++++++
    +++++++++++++
    +++++++++++++
    +++++++++++++
    Q+16
    ++.oooooo.++++++
    +d8P'++`Y8b+++++
    888++++++888++++
    888++++++888++++
    888++++++888++++
    `88b++++d88b++++
    +`Y8bood8P'Ybd'+
    ++++++++++++++++
    ++++++++++++++++
    ++++++++++++++++
    R+13
    ooooooooo.+++
    `888+++`Y88.+
    +888+++.d88'+
    +888ooo88P'++
    +888`88b.++++
    +888++`88b.++
    o888o++o888o+
    +++++++++++++
    +++++++++++++
    +++++++++++++
    S+12
    +.oooooo..o+
    d8P'++++`Y8+
    Y88bo.++++++
    +`"Y8888o.++
    +++++`"Y88b+
    oo+++++.d8P+
    8""88888P'++
    ++++++++++++
    ++++++++++++
    ++++++++++++
    T+14
    ooooooooooooo+
    8'+++888+++`8+
    +++++888++++++
    +++++888++++++
    +++++888++++++
    +++++888++++++
    ++++o888o+++++
    ++++++++++++++
    ++++++++++++++
    ++++++++++++++
    U+14
    ooooo+++++ooo+
    `888'+++++`8'+
    +888+++++++8++
    +888+++++++8++
    +888+++++++8++
    +`88.++++.8'++
    +++`YbodP'++++
    ++++++++++++++
    ++++++++++++++
    ++++++++++++++
    V+16
    oooooo+++++oooo+
    +`888.+++++.8'++
    ++`888.+++.8'+++
    +++`888.+.8'++++
    ++++`888.8'+++++
    +++++`888'++++++
    ++++++`8'+++++++
    ++++++++++++++++
    ++++++++++++++++
    ++++++++++++++++
    W+25
    oooooo+++oooooo+++++oooo+
    +`888.++++`888.+++++.8'++
    ++`888.+++.8888.+++.8'+++
    +++`888++.8'`888.+.8'++++
    ++++`888.8'++`888.8'+++++
    +++++`888'++++`888'++++++
    ++++++`8'++++++`8'+++++++
    +++++++++++++++++++++++++
    +++++++++++++++++++++++++
    +++++++++++++++++++++++++
    X+15
    ooooooo++ooooo+
    +`8888++++d8'++
    +++Y888..8P++++
    ++++`8888'+++++
    +++.8PY888.++++
    ++d8'++`888b+++
    o888o++o88888o+
    +++++++++++++++
    +++++++++++++++
    +++++++++++++++
    Y+14
    oooooo+++oooo+
    +`888.+++.8'++
    ++`888.+.8'+++
    +++`888.8'++++
    ++++`888'+++++
    +++++888++++++
    ++++o888o+++++
    ++++++++++++++
    ++++++++++++++
    ++++++++++++++
    Z+14
    +oooooooooooo+
    d'""${'"'}${'"'}${'"'}${'"'}d888'+
    ++++++.888P+++
    +++++d888'++++
    +++.888P++++++
    ++d888'++++.P+
    .8888888888P++
    ++++++++++++++
    ++++++++++++++
    ++++++++++++++""".replace('+', ' ') // this works so, because someone (like stepik) possibly deletes trailing spaces in lines.

    val mediumFontStr = """3+52
    a+5
    ____+
    |__|+
    |++|+
    b+5
    ___++
    |__]+
    |__]+
    c+5
    ____+
    |++++
    |___+
    d+5
    ___++
    |++\+
    |__/+
    e+5
    ____+
    |___+
    |___+
    f+5
    ____+
    |___+
    |++++
    g+5
    ____+
    |+__+
    |__]+
    h+5
    _++_+
    |__|+
    |++|+
    i+2
    _+
    |+
    |+
    j+3
    +_+
    +|+
    _|+
    k+5
    _++_+
    |_/++
    |+\_+
    l+5
    _++++
    |++++
    |___+
    m+5
    _++_+
    |\/|+
    |++|+
    n+5
    _++_+
    |\+|+
    |+\|+
    o+5
    ____+
    |++|+
    |__|+
    p+5
    ___++
    |__]+
    |++++
    q+5
    ____+
    |++|+
    |_\|+
    r+5
    ____+
    |__/+
    |++\+
    s+5
    ____+
    [__++
    ___]+
    t+4
    ___+
    +|++
    +|++
    u+5
    _++_+
    |++|+
    |__|+
    v+5
    _++_+
    |++|+
    +\/++
    w+6
    _+_+_+
    |+|+|+
    |_|_|+
    x+5
    _++_+
    +\/++
    _/\_+
    y+6
    _+++_+
    +\_/++
    ++|+++
    z+5
    ___++
    ++/++
    +/__+
    A+5
    ____+
    |__|+
    |++|+
    B+5
    ___++
    |__]+
    |__]+
    C+5
    ____+
    |++++
    |___+
    D+5
    ___++
    |++\+
    |__/+
    E+5
    ____+
    |___+
    |___+
    F+5
    ____+
    |___+
    |++++
    G+5
    ____+
    |+__+
    |__]+
    H+5
    _++_+
    |__|+
    |++|+
    I+2
    _+
    |+
    |+
    J+3
    +_+
    +|+
    _|+
    K+5
    _++_+
    |_/++
    |+\_+
    L+5
    _++++
    |++++
    |___+
    M+5
    _++_+
    |\/|+
    |++|+
    N+5
    _++_+
    |\+|+
    |+\|+
    O+5
    ____+
    |++|+
    |__|+
    P+5
    ___++
    |__]+
    |++++
    Q+5
    ____+
    |++|+
    |_\|+
    R+5
    ____+
    |__/+
    |++\+
    S+5
    ____+
    [__++
    ___]+
    T+4
    ___+
    +|++
    +|++
    U+5
    _++_+
    |++|+
    |__|+
    V+5
    _++_+
    |++|+
    +\/++
    W+6
    _+_+_+
    |+|+|+
    |_|_|+
    X+5
    _++_+
    +\/++
    _/\_+
    Y+6
    _+++_+
    +\_/++
    ++|+++
    Z+5
    ___++
    ++/++
    +/__+""".replace('+', ' ') // this works so, because someone (like stepik) possibly deletes trailing spaces in lines.
  learner_created: false
feedback_link: https://hyperskill.org/projects/71/stages/393/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Fri, 13 May 2022 08:15:26 UTC
record: -1
